name: 'Multi-Platform Docker Build'
description: 'publish multi-platform images to ghcr.io with default labels'
inputs:
  image-name:
    description: 'Image name under ghcr.io/$GITHUB_REPOSITORY, if not ${GITHUB_REPOSITORY#*/}'
    default: ""
    required: false
  tags:
    description: 'Tag name(s), space-separated, if not auto-generated'
    default: ""
    required: false
  auto-tags:
    description: 'strategies to use for auto-tag-generation. mix "commit-hash", "release-name", "latest-if-release", "latest-if-main", "branch-name", "short-hash", "branch-ref". default: "commit-hash release-name latest-if-release"'
    default: "commit-hash release-name latest-if-release"
    required: true
  additional-tags:
    description: 'Tag name(s), space-separated, to add to auto-tags'
    default: ""
    required: false
  build-args:
    description: 'Build args, space-separated, to add to build args. Format: "ARG1=VALUE1 ARG2=VALUE2 ARG3 ARG4" The values for ARG3 and ARG4 will be read from the environment variables ARG3 and ARG4.'
    default: ""
    required: false
  docker-file:
    description: 'Path of Dockerfile, if not "Dockerfile"'
    default: Dockerfile
    required: false
  platform:
    description: 'List of comma-separated target platforms, defaults to "linux/amd64,linux/arm64"'
    default: "linux/amd64,linux/arm64"
    required: false
  push:
    description: 'Indicator, if the build image shall be pushed'
    default: "true"
    required: false
  path:
    description: 'Path to build, if not "."'
    default: "."
    required: false
  token:
    description: 'GitHub Token for pushing'
    required: true
  author:
    description: 'Name for authors label, if not committer.name'
    default: ""
    required: false
  email:
    description: 'Email for authors label, if not tierleben-development@vkb.de. use "auto" to use committer.email'
    default: ""
    required: false
runs:
  using: "composite"
  steps:
    - name: set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: construct "author" argument
      env:
        GIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
        GIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
      run: |
        name="${{inputs.author}}"
        if [ -z "$name" ]; then
          name="$GIT_AUTHOR_NAME"
        fi
        email="${{inputs.email}}"
        if [ "$email" == "auto" ]; then
          email="$GIT_AUTHOR_EMAIL"
        fi
        if [ -z "$email" ]; then
          email="tierleben-development@vkb.de"
        fi
        echo "author=$name <$email>" >> $GITHUB_ENV
      shell: bash
    - name: construct image name
      run: |
        imageName="${{inputs.image-name}}"
        if [ -z "$imageName" ]; then
          imageName="${GITHUB_REPOSITORY#*/}"
        fi        
        echo "imageName=${imageName}" >> $GITHUB_ENV
      shell: bash
    - name: construct build args
      run: |
        buildArgs=""
        if [[ -n "${{inputs.build-args}}" ]]; then
          for t in ${{inputs.build-args}}; do
            buildArgs="$buildArgs --build-arg $t"
          done
        fi
        echo "buildArgs=${buildArgs}" >> $GITHUB_ENV
      shell: bash
    - name: construct platform
      run: |
        platform="--platform='${{inputs.platform}}'"
        echo "platform=${platform}" >> $GITHUB_ENV
      shell: bash
    - name: construct push
      run: |
        push=""
        if [ "${{inputs.push}}" == "true" -a "${{github.actor}}" != "dependabot[bot]" ]; then
          push="--push"
        fi
        echo "push=${push}" >> $GITHUB_ENV
      shell: bash
    - name: validate auto tags input
      run: |
        if [[ "${{inputs.auto-tags}}" = *latest-if-release* && "${{inputs.auto-tags}}" = *latest-if-main* ]]; then
          echo "ERROR: The 'auto-tags' latest-if-release and latest-if-main can only be used alternately"
          exit 1
        fi
      shell: bash
    - name: determine auto-tags
      env:
        GITHUB_RELEASE_TAG: ${{ github.event.release.tag_name }}
      run: |
        words=()
        if [[ "${{inputs.auto-tags}}" = *release-name* ]]; then
          if [ -n "$GITHUB_RELEASE_TAG" ]; then
            words+=("$GITHUB_RELEASE_TAG")
          fi
        fi
        if [[ "${{inputs.auto-tags}}" = *latest-if-release* ]]; then
          if [ -n "$GITHUB_RELEASE_TAG" ]; then
            words+=("latest")
          fi
        fi
        if [[ "${{inputs.auto-tags}}" = *commit-hash* ]]; then
          words+=("$GITHUB_SHA")
        fi
        branch=
        if [[ "$GITHUB_REF" == "refs/heads/"* ]]; then
          branch="$(echo "$GITHUB_REF" | cut -c 12- | tr '/' '-')"
        fi
        if [[ "${{inputs.auto-tags}}" = *latest-if-main* ]]; then
          if [[ "$branch" = "main" ]]; then
            words+=("latest")
          fi
        fi
        if [[ "${{inputs.auto-tags}}" = *branch-name* ]]; then
          if [ -n "$branch" ]; then
            words+=("$branch")
          fi
        fi
        shorthash="${GITHUB_SHA:0:7}"
        if [[ "${{inputs.auto-tags}}" = *branch-ref* ]]; then
          if [ -n "$branch" ]; then
            words+=("$branch-$shorthash")
          fi
        fi
        if [[ "${{inputs.auto-tags}}" = *short-hash* ]]; then
          words+=("$shorthash")
        fi
        if [[ -n "${{inputs.additional-tags}}" ]]; then
          for t in ${{inputs.additional-tags}}; do
            words+=("$t")
          done
        fi
        echo "autoTags=${words[@]}" >> $GITHUB_ENV
      shell: bash
    - name: construct "tags" argument for docker build
      run: |
        words=()
        tags="${{inputs.tags}}"
        if [ -z "$tags" ]; then
          tags="${{ env.autoTags }}"
        fi
        for t in $tags; do
          words+=("--tag" "ghcr.io/$GITHUB_REPOSITORY/${{ env.imageName }}:$t")
        done
        echo "tags=${words[@]}" >> $GITHUB_ENV
      shell: bash
    - name: login to ghcr.io
      env:
        TOKEN: ${{ inputs.token }}
      run: echo "$TOKEN" | docker login ghcr.io --username dummy --password-stdin
      shell: bash
    - name: build the docker image
      env:
        GIT_AUTHOR_NAME: ${{ github.event.head_commit.author.name }}
        GIT_AUTHOR_EMAIL: ${{ github.event.head_commit.author.email }}
      run: docker buildx build ${{ inputs.path }}
        --file ${{ inputs.docker-file }}
        --label org.opencontainers.image.created="$(date +'%Y-%m-%dT%H:%M:%S%z')"
        --label org.opencontainers.image.authors="${{ env.author }}"
        --label org.opencontainers.image.source="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
        --label org.opencontainers.image.revision="$GITHUB_SHA"
        --label org.opencontainers.image.url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
        ${{ env.tags }}
        ${{ env.buildArgs }}
        ${{ env.platform }}
        ${{ env.push }}
      shell: bash
